// Generated by gencpp from file kanu_pkg/Markers.msg
// DO NOT EDIT!


#ifndef KANU_PKG_MESSAGE_MARKERS_H
#define KANU_PKG_MESSAGE_MARKERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kanu_pkg/MarkerInfo.h>

namespace kanu_pkg
{
template <class ContainerAllocator>
struct Markers_
{
  typedef Markers_<ContainerAllocator> Type;

  Markers_()
    : marker_info()  {
    }
  Markers_(const ContainerAllocator& _alloc)
    : marker_info(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::kanu_pkg::MarkerInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kanu_pkg::MarkerInfo_<ContainerAllocator> >> _marker_info_type;
  _marker_info_type marker_info;





  typedef boost::shared_ptr< ::kanu_pkg::Markers_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kanu_pkg::Markers_<ContainerAllocator> const> ConstPtr;

}; // struct Markers_

typedef ::kanu_pkg::Markers_<std::allocator<void> > Markers;

typedef boost::shared_ptr< ::kanu_pkg::Markers > MarkersPtr;
typedef boost::shared_ptr< ::kanu_pkg::Markers const> MarkersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kanu_pkg::Markers_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kanu_pkg::Markers_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kanu_pkg::Markers_<ContainerAllocator1> & lhs, const ::kanu_pkg::Markers_<ContainerAllocator2> & rhs)
{
  return lhs.marker_info == rhs.marker_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kanu_pkg::Markers_<ContainerAllocator1> & lhs, const ::kanu_pkg::Markers_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kanu_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kanu_pkg::Markers_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kanu_pkg::Markers_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kanu_pkg::Markers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kanu_pkg::Markers_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kanu_pkg::Markers_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kanu_pkg::Markers_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kanu_pkg::Markers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "233e0e9eb1ef4e1d8dc45028904252ed";
  }

  static const char* value(const ::kanu_pkg::Markers_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x233e0e9eb1ef4e1dULL;
  static const uint64_t static_value2 = 0x8dc45028904252edULL;
};

template<class ContainerAllocator>
struct DataType< ::kanu_pkg::Markers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kanu_pkg/Markers";
  }

  static const char* value(const ::kanu_pkg::Markers_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kanu_pkg::Markers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MarkerInfo[] marker_info\n"
"================================================================================\n"
"MSG: kanu_pkg/MarkerInfo\n"
"uint32 id\n"
"float32[] rvec\n"
"float32[] tvec\n"
"float32 center_x\n"
"float32 center_y\n"
;
  }

  static const char* value(const ::kanu_pkg::Markers_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kanu_pkg::Markers_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.marker_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Markers_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kanu_pkg::Markers_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kanu_pkg::Markers_<ContainerAllocator>& v)
  {
    s << indent << "marker_info[]" << std::endl;
    for (size_t i = 0; i < v.marker_info.size(); ++i)
    {
      s << indent << "  marker_info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kanu_pkg::MarkerInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.marker_info[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KANU_PKG_MESSAGE_MARKERS_H
