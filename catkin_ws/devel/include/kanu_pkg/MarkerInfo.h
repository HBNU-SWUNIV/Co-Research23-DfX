// Generated by gencpp from file kanu_pkg/MarkerInfo.msg
// DO NOT EDIT!


#ifndef KANU_PKG_MESSAGE_MARKERINFO_H
#define KANU_PKG_MESSAGE_MARKERINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kanu_pkg
{
template <class ContainerAllocator>
struct MarkerInfo_
{
  typedef MarkerInfo_<ContainerAllocator> Type;

  MarkerInfo_()
    : id(0)
    , rvec()
    , tvec()
    , center_x(0.0)
    , center_y(0.0)  {
    }
  MarkerInfo_(const ContainerAllocator& _alloc)
    : id(0)
    , rvec(_alloc)
    , tvec(_alloc)
    , center_x(0.0)
    , center_y(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _rvec_type;
  _rvec_type rvec;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _tvec_type;
  _tvec_type tvec;

   typedef float _center_x_type;
  _center_x_type center_x;

   typedef float _center_y_type;
  _center_y_type center_y;





  typedef boost::shared_ptr< ::kanu_pkg::MarkerInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kanu_pkg::MarkerInfo_<ContainerAllocator> const> ConstPtr;

}; // struct MarkerInfo_

typedef ::kanu_pkg::MarkerInfo_<std::allocator<void> > MarkerInfo;

typedef boost::shared_ptr< ::kanu_pkg::MarkerInfo > MarkerInfoPtr;
typedef boost::shared_ptr< ::kanu_pkg::MarkerInfo const> MarkerInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kanu_pkg::MarkerInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kanu_pkg::MarkerInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kanu_pkg::MarkerInfo_<ContainerAllocator1> & lhs, const ::kanu_pkg::MarkerInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.rvec == rhs.rvec &&
    lhs.tvec == rhs.tvec &&
    lhs.center_x == rhs.center_x &&
    lhs.center_y == rhs.center_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kanu_pkg::MarkerInfo_<ContainerAllocator1> & lhs, const ::kanu_pkg::MarkerInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kanu_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kanu_pkg::MarkerInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kanu_pkg::MarkerInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kanu_pkg::MarkerInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kanu_pkg::MarkerInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kanu_pkg::MarkerInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kanu_pkg::MarkerInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kanu_pkg::MarkerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c2d06f36b920e46bab4c11ad2f5b374";
  }

  static const char* value(const ::kanu_pkg::MarkerInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c2d06f36b920e46ULL;
  static const uint64_t static_value2 = 0xbab4c11ad2f5b374ULL;
};

template<class ContainerAllocator>
struct DataType< ::kanu_pkg::MarkerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kanu_pkg/MarkerInfo";
  }

  static const char* value(const ::kanu_pkg::MarkerInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kanu_pkg::MarkerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n"
"float32[] rvec\n"
"float32[] tvec\n"
"float32 center_x\n"
"float32 center_y\n"
;
  }

  static const char* value(const ::kanu_pkg::MarkerInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kanu_pkg::MarkerInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.rvec);
      stream.next(m.tvec);
      stream.next(m.center_x);
      stream.next(m.center_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MarkerInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kanu_pkg::MarkerInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kanu_pkg::MarkerInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "rvec[]" << std::endl;
    for (size_t i = 0; i < v.rvec.size(); ++i)
    {
      s << indent << "  rvec[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rvec[i]);
    }
    s << indent << "tvec[]" << std::endl;
    for (size_t i = 0; i < v.tvec.size(); ++i)
    {
      s << indent << "  tvec[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tvec[i]);
    }
    s << indent << "center_x: ";
    Printer<float>::stream(s, indent + "  ", v.center_x);
    s << indent << "center_y: ";
    Printer<float>::stream(s, indent + "  ", v.center_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KANU_PKG_MESSAGE_MARKERINFO_H
