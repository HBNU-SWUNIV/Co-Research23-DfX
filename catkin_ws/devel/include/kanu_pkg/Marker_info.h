// Generated by gencpp from file kanu_pkg/Marker_info.msg
// DO NOT EDIT!


#ifndef KANU_PKG_MESSAGE_MARKER_INFO_H
#define KANU_PKG_MESSAGE_MARKER_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kanu_pkg
{
template <class ContainerAllocator>
struct Marker_info_
{
  typedef Marker_info_<ContainerAllocator> Type;

  Marker_info_()
    : id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , theta(0.0)  {
    }
  Marker_info_(const ContainerAllocator& _alloc)
    : id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::kanu_pkg::Marker_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kanu_pkg::Marker_info_<ContainerAllocator> const> ConstPtr;

}; // struct Marker_info_

typedef ::kanu_pkg::Marker_info_<std::allocator<void> > Marker_info;

typedef boost::shared_ptr< ::kanu_pkg::Marker_info > Marker_infoPtr;
typedef boost::shared_ptr< ::kanu_pkg::Marker_info const> Marker_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kanu_pkg::Marker_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kanu_pkg::Marker_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kanu_pkg::Marker_info_<ContainerAllocator1> & lhs, const ::kanu_pkg::Marker_info_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kanu_pkg::Marker_info_<ContainerAllocator1> & lhs, const ::kanu_pkg::Marker_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kanu_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kanu_pkg::Marker_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kanu_pkg::Marker_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kanu_pkg::Marker_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kanu_pkg::Marker_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kanu_pkg::Marker_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kanu_pkg::Marker_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kanu_pkg::Marker_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed6a03d5e49c6d2e9ec3bae04b81cddb";
  }

  static const char* value(const ::kanu_pkg::Marker_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed6a03d5e49c6d2eULL;
  static const uint64_t static_value2 = 0x9ec3bae04b81cddbULL;
};

template<class ContainerAllocator>
struct DataType< ::kanu_pkg::Marker_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kanu_pkg/Marker_info";
  }

  static const char* value(const ::kanu_pkg::Marker_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kanu_pkg::Marker_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 theta\n"
;
  }

  static const char* value(const ::kanu_pkg::Marker_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kanu_pkg::Marker_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Marker_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kanu_pkg::Marker_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kanu_pkg::Marker_info_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KANU_PKG_MESSAGE_MARKER_INFO_H
